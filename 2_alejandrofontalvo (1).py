# -*- coding: utf-8 -*-
"""2.AlejandroFontalvo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KGOphJhOOrGe4qDibXI8wtIokKo06J8V
"""

class Personal:
  def __init__(self, Nombre_Empleado: str, Edad_Empleado: str, ID_Empleado : str ) -> None:
    self.Nombre = Nombre_Empleado
    self.Edad = Edad_Empleado
    self.ID = ID_Empleado

  def Registrar_empleado(self,Empresa):
    Empresa.Lista_Empleados.append(self.ID)


class Camiones: 
    def __init__(self, Modelo_Camion: str, ID_Camion: str) -> None:
     self.Nombre = Modelo_Camion
     self.ID_Camion = ID_Camion

    def Crear_Camion(self,Empresa)-> None:
      Empresa.Lista_Camiones.append(self.ID_Camion)
     

class TrashCity:
    
    def __init__(self):
      self.Lista_Empleados = []
      self.Lista_Camiones = []
      self.ResiduosV = [0]
      self.ResiduosP = [0]
      self.ResiduosM = [0]
      self.TotalVR = 0
      self.TotalPR = 0
      self.TotalMR = 0
    
    def Mostrar_Empleados(self):
      for cadena in self.Lista_Empleados:
        print("`````````````````````````")
        print("ID del empleado: ", cadena)

    def Mostrar_Camion(self):
      for cadena in self.Lista_Camiones:
        print("`````````````````````````")
        print("ID del camión: ", cadena)


    def Contar_Residuos_Vidrio_Total(self,Geolocalizacion,Acopio):
      if Geolocalizacion.Turno == True:
        for cadena in self.ResiduosV:
         self.TotalVR = self.TotalVR + cadena
      else:
        print("NO HA TERMINADO EL TURNO")
      self.ResiduosV.append(self.TotalVR)
      print("//////////////////////////////////////////////////////////////") 
      print("             TOTAL             ")
      print("El total de residuos recogidos en el día ", Acopio.Dia ," es:", self.TotalVR, " Residuos de Vidrio" )
      print("//////////////////////////////////////////////////////////////")

    def Contar_Residuos_Papel_Total(self,Geolocalizacion,Acopio):
      if Geolocalizacion.Turno == True:
        for cadena in self.ResiduosP:
         self.TotalPR = self.TotalPR + cadena
      else:
        print("NO HA TERMINADO EL TURNO")
      self.ResiduosP.append(self.TotalPR)
      print("//////////////////////////////////////////////////////////////") 
      print("             TOTAL             ")
      print("El total de residuos recogidos en el día ", Acopio.Dia ," es:", self.TotalPR, " Residuos de papel" )
      print("//////////////////////////////////////////////////////////////")
     
    def Contar_Residuos_Metal_Total(self,Geolocalizacion,Acopio):
      if Geolocalizacion.Turno == True:
        for cadena in self.ResiduosM:
         self.TotalMR = self.TotalMR + cadena
      else:
        print("NO HA TERMINADO EL TURNO")
      self.ResiduosM.append(self.TotalMR)
      print("//////////////////////////////////////////////////////////////") 
      print("             TOTAL             ")
      print("El total de residuos recogidos en el día ", Acopio.Dia ," es:", self.TotalMR, " Residuos de Metal" )
      print("//////////////////////////////////////////////////////////////")

class Geolocalizacion:
   def __init__(self,Latitud, Longitud):
     self.Turno = False
     self.Latitud = Latitud
     self.Longitud = Longitud
    
   def Acabar_turno(self):
      self.Turno = True
      print("//////////////////")
      print("Hora de descansar") 
      print("//////////////////")

class Acopio:
  TotalR = 0
  def __init__(self, GeoLocalizacion,Dia):
     self.Turno = GeoLocalizacion.Turno
     self.Latitud = GeoLocalizacion.Latitud
     self.Longitud = GeoLocalizacion.Longitud
     self.Residuos = [0]
     self.Dia = Dia
  
  def Agregar_Residuos_Vidrio(self,ResiduosV,Empresa):
      print("/////////////////////////////////////////////////////////////////////////////////////////")
      print("            RECOLECCION            ")
      print("El camion ha recolectado ", ResiduosV, "Residuos de VIDRIO en la Latitud ", self.Latitud," y Longitud ",self.Longitud)
      print("/////////////////////////////////////////////////////////////////////////////////////////")
      Empresa.ResiduosV.append(ResiduosV)
  
  def Agregar_Residuos_Papel(self,ResiduosP,Empresa):
      print("/////////////////////////////////////////////////////////////////////////////////////////")
      print("            RECOLECCION            ")
      print("El camion ha recolectado ", ResiduosP, "Residuos de PAPEL en la Latitud ", self.Latitud," y Longitud ",self.Longitud)
      print("/////////////////////////////////////////////////////////////////////////////////////////")
      Empresa.ResiduosP.append(ResiduosP)

  def Agregar_Residuos_Metal(self,ResiduosM,Empresa):
      print("/////////////////////////////////////////////////////////////////////////////////////////")
      print("            RECOLECCION            ")
      print("El camion ha recolectado ", ResiduosM, "Residuos de METAL en la Latitud ", self.Latitud," y Longitud ",self.Longitud)
      print("/////////////////////////////////////////////////////////////////////////////////////////")
      Empresa.ResiduosM.append(ResiduosM)

P = Personal("Alejandro","20","324233")
P2 = Personal("Juan","20","757474")
P3 = Personal("Felipe","34","7848348")
E = TrashCity()
C = Camiones("BMW","23423423")
P.Registrar_empleado(E)
P2.Registrar_empleado(E)
P3.Registrar_empleado(E)
E.Mostrar_Empleados()
C.Crear_Camion(E)
E.Mostrar_Camion()
G = Geolocalizacion("12345","23243")
A = Acopio(G,"3 de Marzo")
A.Agregar_Residuos_Vidrio(600,E)
A.Agregar_Residuos_Papel(200,E)
A.Agregar_Residuos_Metal(100,E)
G1 = Geolocalizacion("12","23")
A1 = Acopio(G1,"3 de Marzo")
A1.Agregar_Residuos_Vidrio(7700,E)
G2 = Geolocalizacion("12234523","232222")
A2 = Acopio(G2,"3 de Marzo")
A2.Agregar_Residuos_Vidrio(900,E)
G2.Acabar_turno()
E.Contar_Residuos_Vidrio_Total(G2,A2)
E.Contar_Residuos_Papel_Total(G2,A2)
E.Contar_Residuos_Metal_Total(G2,A2)